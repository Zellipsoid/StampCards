{"version":3,"sources":["components/Login.js","App.js","serviceWorker.js","index.js"],"names":["socket","openSocket","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","visible","loading","username","password","showCreateNewAccount","showLogin","handleChange","evt","setState","defineProperty","target","name","value","toggleSignUp","movingToCreateAccount","setTimeout","bind","assertThisInitialized","login","emit","create","react_default","a","createElement","className","Input","fluid","onChange","placeholder","type","Button","onClick","normal","_this$state","Grid","Row","Transition","animation","duration","React","Component","App","on","str","console","log","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.3af0767a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\n// import \"./App.css\";\nimport { Button, Input, Grid, Transition } from \"semantic-ui-react\";\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket(\"https://zellipsoid.ngrok.io\");\n// const io = require(\"socket.io-client\");\n// const socket = io.connect(\"https://zellipsoid.ngrok.io\");\n\nclass Login extends React.Component {\n  state = {\n    visible: true,\n    loading: false,\n    username: \"\",\n    password: \"\",\n    showCreateNewAccount: false,\n    showLogin: true\n  };\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange = evt => {\n    // check it out: we get the evt.target.name (which will be either \"email\" or \"password\")\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\n    this.setState({ [evt.target.name]: evt.target.value });\n  };\n  toggleSignUp = () => {\n    let movingToCreateAccount;\n    if (this.state.showCreateNewAccount) {\n      movingToCreateAccount = false;\n    } else {\n      movingToCreateAccount = true;\n    }\n    this.setState({ showCreateNewAccount: false, showLogin: false });\n    if (!movingToCreateAccount) {\n      setTimeout(\n        function() {\n          this.setState({ showLogin: !this.state.showLogin });\n        }.bind(this),\n        500\n      );\n    } else {\n      setTimeout(\n        function() {\n          this.setState({\n            showCreateNewAccount: !this.state.showCreateNewAccount\n          });\n        }.bind(this),\n        500\n      );\n    }\n  };\n  login = () => {\n    socket.emit(\"login\");\n  };\n  create = () => {\n    return (\n      <div>\n        <div className=\"niceMargins\">\n          <div className=\"row\">\n            <Input\n              fluid\n              name=\"password\"\n              onChange={this.handleChange}\n              placeholder=\"Confirm Password\"\n              type=\"password\"\n            />\n          </div>\n        </div>\n        <div className=\"niceMargins\">\n          <div className=\"row\">\n            <Button fluid>Create Account</Button>\n          </div>\n        </div>\n        <div className=\"niceMargins\">\n          <div className=\"row\">\n            <Button fluid onClick={this.toggleSignUp}>\n              Back to login\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  normal = () => {\n    return (\n      <div>\n        <div className=\"niceMargins\">\n          <div className=\"row\">\n            <Button fluid onClick={this.login}>\n              Login\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"niceMargins\">\n          <div className=\"row\">\n            <Button fluid onClick={this.toggleSignUp}>\n              Sign up\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { showCreateNewAccount, showLogin } = this.state;\n    return (\n      <div className=\"ui container\">\n        <div className=\"niceMargins\">\n          <Grid.Row>\n            <Input\n              fluid\n              type=\"text\"\n              name=\"username\"\n              onChange={this.handleChange}\n              placeholder=\"Username\"\n            />\n          </Grid.Row>\n        </div>\n        <div className=\"niceMargins\">\n          <Grid.Row>\n            <Input\n              fluid\n              name=\"password\"\n              onChange={this.handleChange}\n              placeholder=\"Password\"\n              type=\"password\"\n            />\n          </Grid.Row>\n        </div>\n        <Transition animation=\"fade right\" duration={500} visible={showLogin}>\n          {this.normal()}\n        </Transition>\n        <Transition\n          animation=\"fade left\"\n          duration={500}\n          visible={showCreateNewAccount}\n        >\n          {this.create()}\n        </Transition>\n      </div>\n    );\n  }\n}\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/Login\";\n// const io = require(\"socket.io-client\");\n// const socket = io.connect(\"https://zellipsoid.ngrok.io\");\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket(\"https://zellipsoid.ngrok.io\");\n\nclass App extends Component {\n  constructor() {\n    super();\n    socket.on(\"userDataFromBackend\", str => {\n      console.log(\"Wooo!\");\n      console.log(str);\n    });\n  }\n  // componentDidMount() {\n\n  // }\n  render() {\n    return (\n      <div className=\"center\">\n        <Login />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}